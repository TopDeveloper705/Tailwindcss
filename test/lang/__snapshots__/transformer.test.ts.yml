Tools / simple syntax / js / 0: |-
  windi.import("typo.css");
  windi.import("style.css");
  import "module1";
  import "module2";
  import "module3";
  import { export1 } from "module-name";
  import { export1, export2 } from "module-name";
  import { export1, export2 as alias2, export3 as alias3 } from "module-name";
  import * from "module";
  import * as name from "module";
  import defaultExport from "module;
  import defaultExport, { export1, export2 } from "module-name";
  import defaultExport, * as name from "module-name";
  let number = 2;
  let a = number;
  let b = add(mul(10, a), div(mul(10, number), 4));
  let c = minus(a, negative(b));
  let d = "green";
  let e = [10, "green", minus(a, b)];
  let f = [10, "green", minus(a, b)];
  let g = {  
    1: 2,
    "a": 1,
    "b": 2,
    "c": minus(a, b)
  };
  let h = func2(add(func(1, 2), div(4, 3)));
  let h = true;
  let i = mul(false, 3);
  let j = undefined;
  c = add(c, 2);
  add(a, 4);
  console.log(d);
  console.log(b);
  console.warn(add(a, 12));

          import { eval, rgba, get, set } from 'windi/lang';

          const a = get('width');
          set('width', eval('4px'));
          const width = eval('3px');
          export function add(a, b) {
            return a + b;
          }
        ;
  (() => {
  const style = new Style(".test");
  let testNest = 123;
  style.add(new Property("color", "red"));
  style.add((() => {
  const style = new Style(".abc .def");
  style.add(new Property("color", `${d}`));
  return style;
  })());
  return style;
  })();
  (() => {
  const style = new Style(".def");
  let testNest = "green";
  style.add(new Property("color", "red"));
  style.add((() => {
  const style = new Style("&:hover > nest");
  style.add(new Property("background", `${testNest}`));
  return style;
  })());
  return style;
  })();
