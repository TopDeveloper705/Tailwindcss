Tools / simple syntax / js / 0: |-
  __import__("typo.css");
  __import__("style.css");
  import "module1";
  import "module2";
  import "module3";
  import { export1 } from "module-name";
  import { export1, export2 } from "module-name";
  import { export1, export2 as alias2, export3 as alias3 } from "module-name";
  import * from "module";
  import * as name from "module";
  import defaultExport from "module;
  import defaultExport, { export1, export2 } from "module-name";
  import defaultExport, * as name from "module-name";
  function func(a, b) {
  let f = 3;
  function nest(c, d) {
  return __mul__(c, d);
  };
  return __minus__(__add__(a, __div__(b, f)), nest(a, b));
  };
  const add = (a, b) => __add__(a, b);
  ((a, b) => __add__(a, b));
  (function (a, b) {
  return __add__(a, b);
  });
  (function (x) {
  return __add__(x, 2);
  });
  async function f() {
  let promise = new Promise((function (resolve, reject) {
  setTimeout((() => resolve("done!")), 1000);
  }));
  let result = await promise;
  alert(result);
  };
  try {
    let x = 1;
  console.log("No exception occured");
  }catch(e) {
    if (e instanceof TypeError) {
    console.log("TypeError: Failed to set x");
  } else if (e instanceof RangeError) {
    console.log("RangeError: Failed to set x");
  } else if (e) {
    let error = e;
  console.log(`Other exceptions ${error.message}`);
  }} finally {
    console.log("We always do this");
  };
  try {
    fail();
  }catch(e) {
      console.log("Exception occured");};
  try {
    result = __div__(10, x);
  }catch(e) {
    if (e instanceof TypeError) {
    let error1 = e;
  console.log(`Type Error ${error1.message}`);
  }};
  try {
    result = __div__(10, x);
  }catch(e) {
    if (e) {
    let error = e;
  console.log("Exceptions");
  }};
  let add3 = ((a) => __add__(a, 3));
  let add = ((a, b) => __add__(a, b));
  let c = __mul__(((a, b) => __add__(a, b))(1, 2), 4);
  let d = __div__((function (a, b) {
  return __add__(a, b);
  })(1, 2), 3);
  let number = 2;
  let a = number;
  let b = __add__(__mul__(10, a), __div__(__mul__(10, number), 4));
  let c = __minus__(a, __negative__(b));
  let d = "green";
  let e = [10, "green", __minus__(a, b)];
  let f = [10, "green", __minus__(a, b)];
  let g = {  
    1: 2,
    "a": 1,
    "b": 2,
    "c": __minus__(a, b)
  };
  if (a > 0 && b > 0) {
    console.log("The numbers are greater than 0");
  };
  if (a > 0 && b > 0 && c > 0) {
    console.log("The numbers are greater than 0");
  } else {
    console.log("Atleast one number is not greater than 0");
  };
  if (a > 0) {
    console.log("a");
  } else if (b > 0) {
    console.log("b");
  } else if (c > 0) {
    console.log("c");
  } else {
    console.log("unknown");
  };
  let i = 3;
  while (i > 0) {
    console.log(i);
  i = __minus__(i, 1);
  };
  if (!(i > 0)) {
    console.log(i);
  };
  () => {
    let c = add(1, 2);
    c = __add__(c, 3);
  console.log(c);
  };
  break;
  continue;
  yield 123;
  throw Error("msg");
  console.assert(!(1 === 2) && 5 > 3);
  console.assert(!(1) === 2 && 5 > 3);
  let e = a.c(1, 2)("5").hello()(123)["test"].def;
  console.assert(__in__(4, [1, 2, 4]));
  let h = func2(__add__(func(1, 2), __div__(4, 3)));
  let h = true;
  let i = __mul__(false, 3);
  let j = undefined;
  let date = __add__(new Date("123"), __div__(new Date("456"), 4));
  c = __negative__(__exp__(4, 4));
  __add__(a, 4);
  console.log(d);
  console.log(b);
  console.warn(__add__(a, 12));
  delete a;
  __interpret__("bg-red-500 text-white sm:bg-gray-200");
  __attributify__("bg", "red-500 opacity-50 sm:red-200");
  __attributify__("sm:text", "red-500 opacity-30");

          import { eval, rgba, get, set } from 'windi/lang';

          const a = get('width');
          set('width', eval('4px'));
          const width = eval('3px');
          export function add(a, b) {
            return a + b;
          }
        ;
  (() => {
  const style = new Style(".test");
  let testNest = 123;
  style.add(new Property("color", "red"));
  style.add((() => {
  const style = new Style(".abc .def");
  __interpret__("font-bold text-lg");
  style.add(new Property("color", `${d}`));
  return style;
  })());
  return style;
  })();
  (() => {
  const style = new Style(".def");
  let testNest = "green";
  style.add(new Property("color", "red"));
  style.add((() => {
  const style = new Style("&:hover > nest");
  style.add(new Property("background", `${testNest}`));
  return style;
  })());
  return style;
  })();
